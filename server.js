const fs = require('fs')
const path = require('path')
const LRU = require('lru-cache')
const chalk = require('chalk');
const Koa = require('koa');
const Router = require('koa-router');
const favicon = require('koa-favicon')
const compression = require('koa-compress');
const static = require('koa-static');

const resolve = file => path.resolve(__dirname, file)

const { createBundleRenderer } = require('vue-server-renderer')

const proxy = require('koa-proxies');

const isProd = process.env.NODE_ENV === 'production'

const serverInfo =
  `koa/${require('koa/package.json').version} ` +
  `vue-server-renderer/${require('vue-server-renderer/package.json').version}`

const app = new Koa();
const {apiRouter} = require('./router')


// 开启接口代理
const config = require('./config');
Object.keys(config.proxyTables).forEach(key => {
  app.use(proxy(key, config.proxyTables[key]));
});



function createRenderer (bundle, options) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return createBundleRenderer(bundle, Object.assign(options, {
    // for component caching
    cache: LRU({
      max: 1000,
      maxAge: 1000 * 60 * 15
    }),
    // this is only needed when vue-server-renderer is npm-linked
    basedir: resolve('./dist'),
    // recommended for performance
    runInNewContext: false
  }))
}

let renderer
let readyPromise
const templatePath = resolve('./src/index.template.html')

if (isProd) {

  // In production: create server renderer using template and built server bundle.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  const template = fs.readFileSync(templatePath, 'utf-8')
  const bundle = require('./dist/vue-ssr-server-bundle.json')
  // The client manifests are optional, but it allows the renderer
  // to automatically infer preload/prefetch links and directly add <script>
  // tags for any async chunks used during render, avoiding waterfall requests.
  const clientManifest = require('./dist/vue-ssr-client-manifest.json')
  renderer = createRenderer(bundle, {
    template,
    clientManifest
  })
} else {
  // In development: setup the dev server with watch and hot-reload,
  // and create a new renderer on bundle / index template update.
  readyPromise = require('./build/setup-dev-server')(
    app,
    templatePath,
    (bundle, options) => {
      renderer = createRenderer(bundle, options)
    }
  )
}


const serve = (root, cache) => static(root, {
    maxage: cache && isProd ? 1000 * 60 * 60 * 24 * 30 : 0
});

app.use(compression({ threshold: 0 }))
app.use(favicon('./public/logo-48.png'))


app.use(serve('./dist', true));
app.use(serve('./public', true));
app.use(serve('./', true));


app.use(apiRouter.routes()).use(apiRouter.allowedMethods());

// since this app has no user-specific content, every page is micro-cacheable.
// if your app involves user-specific content, you need to implement custom
// logic to determine whether a request is cacheable based on its url and
// headers.
// 1-second microcache.
// https://www.nginx.com/blog/benefits-of-microcaching-nginx/
// app.use(microcache.cacheSeconds(1, req => useMicroCache && req.originalUrl))


async function render (ctx) {
  const s = Date.now()

  ctx.set("Content-Type", "text/html")
  ctx.set("Server", serverInfo)

  const handleError = err => {
    if (err.url) {
      ctx.redirect(err.url)
    } else if(err.code === 404) {
      ctx.type = 'text/plain';
      ctx.status = 404;
      ctx.body = '404 | Page Not Found';
    } else {
      // Render Error Page or Redirect
      ctx.status = 500;
      ctx.body = '500 | Internal Server Error';
      console.error(`error during render : ${ctx.url}`)
      console.error(err.stack)
    }
  }

  const context = {
    title: 'koa-vue', // default title
    url: ctx.url
  }

  try {
    let html = await renderer.renderToString(context)
    ctx.status = 200;
    ctx.type = 'text/html'
    ctx.body = html

  } catch (err) {
    return handleError(err)
  }

  if (!isProd) {
    console.log(`whole request: ${Date.now() - s}ms`)
  }
}


const router = new Router()
router.get('*', isProd ? render : async (ctx, next) => {
  await readyPromise.then(() =>  render(ctx))
})
app.use(router.routes()).use(router.allowedMethods())


const port = process.env.PORT || 8888
app.listen(port, () => {
  console.log(`server started at localhost:${port}`)
})




